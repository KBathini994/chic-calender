import React, { useState } from "react";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { 
  DollarSign, 
  BarChart2, 
  Package2, 
  Users, 
  Heart, 
  Bell, 
  Calendar, 
  CreditCard, 
  Search
} from "lucide-react";
import { DailyRevenue } from "@/components/admin/reports/DailyRevenue";

const reportCategories = [
  {
    id: "financial",
    name: "Financial Overview",
    icon: <DollarSign className="h-5 w-5" />,
    reports: [
      { id: "summary", name: "Summary", description: "Key business financial metrics" },
      { id: "daily-revenue", name: "Daily Revenue", description: "Includes tips, outstanding balances, and collected payments" },
      { id: "payment-source", name: "Payment by Source", description: "Breakdown of income by payment method (cash, card, online)" },
      { id: "collected-payments", name: "Collected Outstanding Payments", description: "Shows collected outstanding balances" },
      { id: "expenses", name: "Expenses", description: "Lists expenses with date, amount, and payment method" }
    ]
  },
  {
    id: "inventory",
    name: "Inventory Reports",
    icon: <Package2 className="h-5 w-5" />,
    reports: [
      { id: "stock-levels", name: "Stock Levels", description: "Current inventory stock levels" },
      { id: "low-stock", name: "Low Stock Items", description: "Items that need to be restocked" },
      { id: "consumption", name: "Consumption Trends", description: "Patterns of inventory usage over time" }
    ]
  },
  {
    id: "sales",
    name: "Sales Performance",
    icon: <BarChart2 className="h-5 w-5" />,
    reports: [
      { id: "sales-trends", name: "Sales Trends", description: "Analyze sales performance over time" },
      { id: "service-popularity", name: "Service Popularity", description: "Most popular services and packages" },
      { id: "revenue-growth", name: "Revenue Growth", description: "Month-over-month and year-over-year growth" }
    ]
  },
  {
    id: "staff",
    name: "Staff Performance",
    icon: <Users className="h-5 w-5" />,
    reports: [
      { id: "productivity", name: "Productivity", description: "Appointments and services performed by staff" },
      { id: "revenue-generation", name: "Revenue Generation", description: "Revenue generated by each staff member" },
      { id: "availability", name: "Availability and Scheduling", description: "Staff scheduling patterns and availability" }
    ]
  },
  {
    id: "customer-retention",
    name: "Customer Retention",
    icon: <Heart className="h-5 w-5" />,
    reports: [
      { id: "retention-rate", name: "Retention Rate", description: "Customer return and loyalty metrics" },
      { id: "churn", name: "Churn Analysis", description: "Analysis of customers who don't return" },
      { id: "loyalty", name: "Loyalty Program Performance", description: "Effectiveness of loyalty initiatives" }
    ]
  },
  {
    id: "customer-engagement",
    name: "Customer Engagement",
    icon: <Bell className="h-5 w-5" />,
    reports: [
      { id: "feedback", name: "Customer Feedback", description: "Summaries of customer reviews and feedback" },
      { id: "marketing", name: "Marketing Campaign Performance", description: "Effectiveness of marketing efforts" },
      { id: "referrals", name: "Referral Sources", description: "How new customers find your business" }
    ]
  }
];

export default function Reports() {
  const [searchQuery, setSearchQuery] = useState("");
  const [activeCategory, setActiveCategory] = useState("all");
  
  const filteredReports = reportCategories
    .filter(category => activeCategory === "all" || category.id === activeCategory)
    .flatMap(category => 
      category.reports.filter(report => 
        report.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
        report.description.toLowerCase().includes(searchQuery.toLowerCase())
      ).map(report => ({
        ...report,
        categoryName: category.name,
        categoryIcon: category.icon,
        categoryId: category.id
      }))
    );
  
  return (
    <div className="container py-6">
      <div className="flex flex-col space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold tracking-tight">Reports</h1>
          <div className="relative w-64">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search reports..."
              className="w-full pl-8"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        
        <Tabs defaultValue="all" value={activeCategory} onValueChange={setActiveCategory}>
          <div className="border-b">
            <TabsList className="h-10">
              <TabsTrigger value="all" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">
                All Reports
              </TabsTrigger>
              {reportCategories.map(category => (
                <TabsTrigger 
                  key={category.id} 
                  value={category.id}
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  <div className="flex items-center gap-2">
                    {category.icon}
                    <span>{category.name}</span>
                  </div>
                </TabsTrigger>
              ))}
            </TabsList>
          </div>
          
          <TabsContent value="all" className="mt-6">
            {activeCategory === "all" && searchQuery === "" && (
              <div className="mb-6">
                <DailyRevenue />
              </div>
            )}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredReports.map(report => (
                <ReportCard 
                  key={`${report.categoryId}-${report.id}`}
                  title={report.name}
                  description={report.description}
                  category={report.categoryName}
                  icon={report.categoryIcon}
                />
              ))}
            </div>
          </TabsContent>
          
          {reportCategories.map(category => (
            <TabsContent key={category.id} value={category.id} className="mt-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {category.reports
                  .filter(report => 
                    report.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
                    report.description.toLowerCase().includes(searchQuery.toLowerCase())
                  )
                  .map(report => (
                    <ReportCard 
                      key={report.id}
                      title={report.name}
                      description={report.description}
                      category={category.name}
                      icon={category.icon}
                    />
                  ))
                }
              </div>
            </TabsContent>
          ))}
        </Tabs>
      </div>
    </div>
  );
}

interface ReportCardProps {
  title: string;
  description: string;
  category: string;
  icon: React.ReactNode;
}

function ReportCard({ title, description, category, icon }: ReportCardProps) {
  return (
    <Card className="overflow-hidden hover:shadow-md transition-all cursor-pointer">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            {icon}
            <p className="text-sm text-muted-foreground">{category}</p>
          </div>
          <Calendar className="h-4 w-4 text-muted-foreground" />
        </div>
        <CardTitle className="text-xl">{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-40 flex items-center justify-center bg-muted/30 rounded-md">
          <p className="text-muted-foreground text-center">
            Preview data will appear here
          </p>
        </div>
      </CardContent>
    </Card>
  );
}
